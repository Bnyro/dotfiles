#!/usr/bin/bash

### Helper scripts for xbps

USERNAME=Bnyro
VOIDDIR=~/Projects/void-packages
VOIDREPO="https://repo-default.voidlinux.org"

inv() { # <true|false>
	if [ "$1" = true ]; then
		echo "false"
	else
		echo "true"
	fi
}

get_branch() {
	git rev-parse --abbrev-ref HEAD
}

prep_pkgs() {
	if [ ! -d "$VOIDDIR" ]; then
		git clone "git@github.com:$USERNAME/void-packages" "$VOIDDIR"
		cd "$VOIDDIR"
		git remote add upstream "https://github.com/void-linux/void-packages.git"
		git fetch upstream
		git reset --hard upstream/master
		git push
		./xbps-src binary-bootstrap
		./xbps-src clean
	else
		cd "$VOIDDIR"
	fi
}

pkg_install() { # <package name>
	./xbps-src pkg "$1" || exit 1
	xi -y "$1"
}

build() { # <package/branch name> <github user name of fork>
	local pkgname="$1"
	local ghuser="$2"
	
	prep_pkgs

	if [ "$ghuser" ]; then
		git remote add "$ghuser" "https://github.com/$ghuser/void-packages.git"
		git fetch "$ghuser"
		git checkout "$ghuser"/"$pkgname"
		git merge upstream/master --no-edit
	else
		git checkout "$pkgname"
	fi
	pkg_install "$pkgname"
	git checkout master
}

commit() { # <package name>
	local pkgname="${1:-`get_branch`}"

	xgensum -i "$pkgname"
	pkg_install "$pkgname" || exit 1
	xbump "$pkgname"
	git push --set-upstream origin --force "$(git branch --show-current)"

	echo -e "\nMaintainer: $(maintainer $pkgname)"
	search "$pkgname"
	xlint "$pkgname" || exit 1
	echo ""
}

bump() { # <package name> <new version> -[a(dopt)|o(rphan)|k(eepbranch)]
	local pkgname="$1"
	local newversion="$2"
	
	local adopt=false
	local orphan=false
	local keepbranch=false

	for arg in "${@:3}"; do
		case $arg in
			-a) adopt=`inv $adopt` ;;
			-o) orphan=`inv $orphan` ;;
			-k) keepbranch=`inv $keepbranch` ;;
		esac
	done

	prep_pkgs

	# only checkout to a new branch if not disabled
	if ! [ "$keepbranch" = true ]; then
		git branch -D "$pkgname"
		git checkout -b "$pkgname"
		git reset --hard upstream/master
	fi
	local template="srcpkgs/$pkgname/template"
	
	# update the version
	sed -i "/^version=/s/=.*/=$newversion/" "$template"
	# reset the revision
	sed -i "/^revision=/s/=.*/=1/" "$template"
	# replace all legacy http occurences
	sed -i "s@http://@https://@g" "$template"
	
	# update the maintainer if specified
	if [ "$orphan" = true ]; then
		sed -i "0,/maintainer=.*/s//maintainer=\"Orphaned <orphan@voidlinux.org>\"/" "$template"
	fi

	# adopt the package if specified
	if [ "$adopt" = true ]; then
		local username=$(git config user.name)
		local email=$(git config user.email)
		sed -i "0,/maintainer=.*/s//maintainer=\"$username <$email>\"/" "$template"
	fi

	commit "$1"
}

pr() { # <testing state> (<pr title>)
	cd "$VOIDDIR"

	local testingstate="${1:-YES}"
	local title="${2:-`git show -s --format=%s`}"

	local username=$(git config user.name)
	local existingpr=`gh pr list --author "$username" --search $(get_branch) | cut -f 1`

	if [ "$existingpr" ]; then
		gh pr edit "$existingpr" --title "$title"
		exit 0
	fi

	echo "
#### Testing the changes
- I tested the changes in this PR: **$1**

#### Local build testing
- I built this PR locally for my native architecture, x86_64-glibc
" | gh pr create --title "$title" --body-file -
	git checkout master
}

update() {
	sudo xbps-install -Syu
	sudo xbps-remove -O
	sudo rm -rf /var/cache/* /var/tmp/*
	sudo vkpurge rm all
}

parse_pkg_block() { # <outdated pkg list>
	local packages="$1"
	local xpkgflags="$2"
	local currentmaintainer=""

	local installed="\n$(xpkg $xpkgflags | sed -e '/^lib.*$/d')\n"
	echo "$packages" | while read line; do
		local pkgname=$(echo $line | cut -d " " -f 1)
		if [ -z "$line" ] || [[ "$line" = "------"* ]]; then
			continue
		elif [[ "$line" =~ .+@.+ ]]; then
			currentmaintainer="$line"
		elif echo "$installed" | grep -zoP "\n$pkgname\n" &> /dev/null; then
			echo $(echo $line | sed 's/  \+/   /g') $currentmaintainer
		fi
	done
}

check_pkgs() { # [-o]: orphaned/outdated, [-m]: manually installed
	local filterorphaned=true
	local xpkgflags=""
	local usermail=$(git config user.email)

	for arg in "$@"; do
		if [[ "$arg" == "-o" ]]; then filterorphaned=`inv $filterorphaned`
		else xpkgflags+="$arg "; fi
	done

	prep_pkgs

	echo "Outdated packages of $usermail:"
	curl -s "$VOIDREPO/void-updates/void-updates/updates_$usermail.txt"
	echo "========================================="
	
	local outdated=$(curl -s "$VOIDREPO/void-updates/void-updates.txt" | tail -n +4)
	outdated="$(echo "$outdated" | tac | awk '!seen[$1]++' | tac)"
	outdated="$(parse_pkg_block "$outdated" "$xpkgflags")"
	if [ "$filterorphaned" = true ]; then
		outdated="$(echo "$outdated" | sed 's/ /&/6;T;d'; echo "$outdated" | grep -E 'orphan|ericonr|gottox')"
	fi
	outdated="$(echo "$outdated" | sort | uniq)"

	echo -e "$outdated"
	echo "============================"
	echo -e "Outdated packages total: $(echo "$outdated" | wc -l)\n"
}

reset() { # <main branch>
	local mainbranch="${1:-master}"
	local oldbranch=$(get_branch)

	git checkout "$mainbranch"
	git reset --hard
	git branch -D "$oldbranch"
	git push origin -d "$oldbranch"
}

orphan() { # <maintainer field of person to orphan>
	prep_pkgs

	local maintainer="$1"
	local name="$(echo "$maintainer" | cut -d '<' -f 1 | sed 's/ $//')"
	local branch="orphan-${name/ /-}"

	git checkout -b "$branch"
	grep -Ril "$1" srcpkgs/**/* 2> /dev/null | while read template; do
		sed -i "0,/maintainer=.*/s//maintainer=\"Orphaned <orphan@voidlinux.org>\"/" "$template"
	done

	git commit -am "srcpkgs: orphan $name's packages"
	git push --set-upstream origin "$branch"
}

search() { # <search query> (<cmd flags>)
	local query="$1"

	gh search prs --state open --repo void-linux/void-packages --match title "$query" ${@:2}
}

maintainer() { # <package name>
	local pkgname="$1"

	prep_pkgs

	cat "srcpkgs/$pkgname/template" | grep "maintainer=" | cut -d "=" -f 2 | tr -d '"'
}

case ${1} in
update|u) update "${@:2}" ;;
check|c) check_pkgs "${@:2}" ;;
build) build "${@:2}" ;;
bump|b) bump "${@:2}" ;;
commit|c) commit "${@:2}" ;;
pr) pr "${@:2}" ;;
reset|r) reset "${@:2}" ;;
orphan|o) orphan "${@:2}" ;;
search|s) search "${@:2}" ;;
who) maintainer "${@:2}" ;;
esac
